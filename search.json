[{"path":"https://posit-dev.github.io/acquaint/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Posit Software, PBC Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://posit-dev.github.io/acquaint/articles/acquaint.html","id":"the-basics","dir":"Articles","previous_headings":"","what":"The basics","title":"Getting started with acquaint","text":"acquaint built around three main concepts: Clients apps ’d like connect R session , like Claude Desktop Claude Code. acquaint supports client supports MCP. Clients talk R sessions using server. client supports MCP provide entry point configure command additional arguments client. acquaint’s command arguments Rscript -e \"acquaint::mcp_server()\". Different clients register command different ways. example, use acquaint client Claude Code, might write claude mcp add -s \"user\" r-acquaint -- Rscript -e \"acquaint::mcp_server()\". Sessions R sessions client ultimately talks . , RStudio Positron window open, applications automatically start R session client potentially talk . “opt ” R sessions discovered clients, run R code acquaint::mcp_session(). ’ll likely want run code every time start R; , add acquaint::mcp_session() .Rprofile, perhaps first calling usethis::edit_r_profile(). (case caught eye: yes, server R session. acquaint’s documentation, ’ll always refer server R session just server; fact ’s implemented R technical detail.) case client want connect R, everything “just work” two steps: 1) Configure command Rscript -e \"acquaint::mcp_server()\" according client’s instructions. 2) Add acquaint::mcp_session() .Rprofile, perhaps first calling usethis::edit_r_profile(). , ’re good go! (, instead, ’re interested “direction,” R client—presumably via ellmer—’d like grab context MCP servers, keep eye additions .)","code":""},{"path":"https://posit-dev.github.io/acquaint/articles/acquaint.html","id":"multiple-clients-and-r-sessions","dir":"Articles","previous_headings":"","what":"Multiple clients and R sessions","title":"Getting started with acquaint","text":"single client single R session probably covers many users’ use cases, acquaint supports multiple clients multiple R sessions. example, former, may chatting Claude Desktop running Claude Code terminal somewhere. , multiple R sessions situation, may two Positron instances running , different data science projects . multiple clients, “just work”; ’s nothing keep mind . multiple R sessions, acquaint choose default R session model talk without client knowing even multiple options. , might project “goats” open one Positron window another project, “sheep”, open another Positron window. acquaint provides models two tools facilitate toggling sessions. first, list_r_sessions(), allows client “discover” R sessions available working directory (inferred) IDE. , tool select_r_session() allows client (persistently) choose R session. , write “goats R session, somequestionsome question.” case, model might call list_r_sessions() find full identifier goats session, select_r_session(), whatever tools use respond question. Notably, ask follow-question (haven’t closed Positron window goats pulled meantime) client chat, client doesn’t need use list_r_sessions() select_r_session() , can just call whatever tools needs answer follow-. multiple clients multiple R sessions, generally “just work.” said, note clients can connected one R session time. clients, like Claude Code, isn’t much issue. chat apps like Claude Desktop, though, may run hiccups multiple chats actively going time. example, imagine ask Claude via Claude Desktop problem R session “goats” , moment later, spin different chat ask “sheep” project. second chat, Claude likely use select_r_session() choose “sheep” project. go back chat “goats” ask follow-, R session tool calls dispatch actually also “sheep” project. tool call, say, reads documentation, isn’t issue. tool call describe variable global environment, though, value variable may exist —different —“sheep” project.","code":""},{"path":"https://posit-dev.github.io/acquaint/articles/acquaint.html","id":"custom-tools","dir":"Articles","previous_headings":"","what":"Custom tools","title":"Getting started with acquaint","text":"default, acquaint supplies clients btw::btw_tools(), set atomic tools data science btw package. tools allow clients : Peruse package documentation Describe R session information variables global environment Run queries data sources Users might interested extending tools supplying completely different ones. example, might register: set tools specifically focused R package development (e.g. various wrappers devtools testthat) hooked Claude Code make package development assistant. brave, tool run_r_code() allows client run whatever R code wants. can configure set tools passed $set_tools() method ellmer Chat object tools acquaint supply clients. , supply list outputs ellmer::tool() acquaint::mcp_set_tools() inside .Rprofile. ’s important mcp_set_tools() called inside .Rprofile ’s run every time R starts. way, clients start run configured command Rscript, Rscript first run mcp_set_tools() , client asks server tools available, server can describe specifically new tools ’ve configured. Relatedly, ’ll need make sure code specifies new tools can run fresh R session; sure either namespace functions libraries (like ellmer::tool() instead tool()) load libraries entirely. Note , ’d like supply custom tools addition default tools btw, ’ll need write acquaint::mcp_set_tools(c(btw::btw_tools(), your_custom_tools)).","code":""},{"path":"https://posit-dev.github.io/acquaint/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Simon Couch. Author, maintainer. Winston Chang. Author. Charlie Gao. Author. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://posit-dev.github.io/acquaint/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Couch S, Chang W, Gao C (2025). acquaint: Model Context Protocol Server R Sessions. R package version 0.0.0.9000, https://github.com/posit-dev/acquaint.","code":"@Manual{,   title = {acquaint: Model Context Protocol Server For Your R Sessions},   author = {Simon Couch and Winston Chang and Charlie Gao},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/posit-dev/acquaint}, }"},{"path":"https://posit-dev.github.io/acquaint/index.html","id":"acquaint-","dir":"","previous_headings":"","what":"Model Context Protocol Server For Your R Sessions","title":"Model Context Protocol Server For Your R Sessions","text":"acquaint implements Model Context Protocol (MCP) server R sessions. configured acquaint, MCP-enabled tools like Claude Desktop Claude Code can run R code sessions running answer questions. package supports configuring arbitrary R functions, acquaint provides default set tools btw : Peruse documentation packages installed, Check objects global environment, Retrieve metadata session platform. IMPORTANT: package highly experimental interface may change rapidly!","code":""},{"path":"https://posit-dev.github.io/acquaint/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model Context Protocol Server For Your R Sessions","text":"can install development version acquaint like : acquaint can hooked application supports MCP. example, use Claude Desktop, might paste following Claude Desktop configuration (macOS, ~/Library/Application Support/Claude/claude_desktop_config.json): , use Claude Code, might type terminal: , R session, call acquaint::mcp_session(). (might include call function .Rprofile, perhaps using usethis::edit_r_profile(), automatically register every session start .) thorough introduction, see vignette “Getting started acquaint” vignette(\"acquaint\", package = \"acquaint\").","code":"pak::pak(\"posit-dev/acquaint\") {   \"mcpServers\": {     \"r-acquaint\": {       \"command\": \"Rscript\",       \"args\": [\"-e\", \"acquaint::mcp_server()\"]     }   } } claude mcp add -s \"user\" r-acquaint -- Rscript -e \"acquaint::mcp_server()\""},{"path":"https://posit-dev.github.io/acquaint/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Model Context Protocol Server For Your R Sessions","text":"Claude Desktop, ’ll write following: Using R packages installed, write code download data flights /Chicago airports 2024. typical chat interface, ’d wary two failure points : model doesn’t know packages installed. model correctly guesses packages installed, may enough information use packages baked weights write correct code.  first searching installed packages, Claude can locate anyflights package, seems like reasonable solution. model discovers package’s anyflights() function reads documentation, can pattern-match write correct code.","code":""},{"path":"https://posit-dev.github.io/acquaint/reference/acquaint-package.html","id":null,"dir":"Reference","previous_headings":"","what":"acquaint: Model Context Protocol Server For Your R Sessions — acquaint-package","title":"acquaint: Model Context Protocol Server For Your R Sessions — acquaint-package","text":"Implements model context protocol (MCP) server R sessions, allowing MCP-compatible apps like Claude Desktop Claude Code run R code active R sessions order better answer questions. default, package supplies set tools allow models inspect R environment peruse package documentation, supports arbitrary R functions tools.","code":""},{"path":[]},{"path":"https://posit-dev.github.io/acquaint/reference/acquaint-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"acquaint: Model Context Protocol Server For Your R Sessions — acquaint-package","text":"Maintainer: Simon Couch simon.couch@posit.co (ORCID) Authors: Winston Chang winston@posit.co Charlie Gao charlie.gao@posit.co (ORCID) contributors: Posit Software, PBC (03wc8by49) [copyright holder, funder]","code":""},{"path":"https://posit-dev.github.io/acquaint/reference/mcp.html","id":null,"dir":"Reference","previous_headings":"","what":"Model context protocol for your R session — mcp_server","title":"Model context protocol for your R session — mcp_server","text":"Together, functions implement model context protocol server R session.","code":""},{"path":"https://posit-dev.github.io/acquaint/reference/mcp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model context protocol for your R session — mcp_server","text":"","code":"mcp_server()  mcp_session()"},{"path":"https://posit-dev.github.io/acquaint/reference/mcp.html","id":"configuration","dir":"Reference","previous_headings":"","what":"Configuration","title":"Model context protocol for your R session — mcp_server","text":"mcp_server() configured MCP clients via Rscript command. example, use Claude Desktop, paste following Claude Desktop configuration (macOS, file.edit(\"~/Library/Application Support/Claude/claude_desktop_config.json\")):   , use Claude Code, might type terminal:   mcp_server() intended interactive use. server interfaces MCP client behalf R session. Use mcp_session() make R session available server. Place call acquaint::mcp_session() .Rprofile, perhaps usethis::edit_r_profile(), make every interactive R session start available server.","code":"{   \"mcpServers\": {     \"r-acquaint\": {       \"command\": \"Rscript\",       \"args\": [\"-e\", \"acquaint::mcp_server()\"]     }   } } claude mcp add -s \"user\" r-acquaint Rscript -e \"acquaint::mcp_server()\""},{"path":[]},{"path":"https://posit-dev.github.io/acquaint/reference/mcp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model context protocol for your R session — mcp_server","text":"","code":"if (interactive()) { mcp_session() }"},{"path":"https://posit-dev.github.io/acquaint/reference/mcp_set_tools.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the tools available to run in your R session — mcp_set_tools","title":"Set the tools available to run in your R session — mcp_set_tools","text":"default, acquaint supplies tools btw::btw_tools() allow clients peruse package documentation, inspect global environment, query session details. function allows register tools created ellmer::tool() instead. call function must placed .Rprofile client (.e. Claude Desktop Claude Code) restarted order new tools registered. acquaint always register tools \"list_r_sessions\" \"select_r_session\" addition tools provided ; tool names thus reserved package.","code":""},{"path":"https://posit-dev.github.io/acquaint/reference/mcp_set_tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the tools available to run in your R session — mcp_set_tools","text":"","code":"mcp_set_tools(x)"},{"path":"https://posit-dev.github.io/acquaint/reference/mcp_set_tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the tools available to run in your R session — mcp_set_tools","text":"x list tools created ellmer::tool(). list passed chat$set_tools() can passed .","code":""},{"path":"https://posit-dev.github.io/acquaint/reference/mcp_set_tools.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the tools available to run in your R session — mcp_set_tools","text":"x, invisibly. Called side effects. function error x list ellmer::ToolDef objects tool name one reserved names \"list_r_sessions\" \"select_r_session\".","code":""},{"path":"https://posit-dev.github.io/acquaint/reference/mcp_set_tools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the tools available to run in your R session — mcp_set_tools","text":"","code":"library(ellmer)  tool_rnorm <- tool(   rnorm,   \"Draw numbers from a random normal distribution\",   n = type_integer(\"The number of observations. Must be a positive integer.\"),   mean = type_number(\"The mean value of the distribution.\"),   sd = type_number(\"The standard deviation of the distribution. Must be a non-negative number.\") )  # supply only one tool, tool_rnorm mcp_set_tools(list(tool_rnorm))  # supply both tool_rnorm and `btw_tools()` mcp_set_tools(c(list(tool_rnorm), btw::btw_tools()))"}]
